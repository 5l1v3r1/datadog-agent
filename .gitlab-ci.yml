stages:
  - source_test
  - binary_build
  - integration_test
  - package_build
  - internal_deploy
  - check_deploy
  - testkitchen_deploy
  - testkitchen_testing
  - pkg_metrics
  - image_build
  - image_deploy
  - deploy6
  - deploy7
  - deploy_invalidate
  - e2e
  - testkitchen_cleanup

variables:
  # The SRC_PATH is in the GOPATH of the builders which
  # currently is /go
  SRC_PATH: /go/src/github.com/DataDog/datadog-agent
  # Directory in which we execute the omnibus build.
  # For an unknown reason, it does not go well with
  # a ruby dependency if we build directly into $CI_PROJECT_DIR/.omnibus
  OMNIBUS_BASE_DIR: /.omnibus
  # Directory in which we put the artifacts after the build
  # Must be in $CI_PROJECT_DIR
  OMNIBUS_PACKAGE_DIR: $CI_PROJECT_DIR/.omnibus/pkg/
  # Directory in which we execute the omnibus build for SUSE
  # as we want to separate the RPM built for this distro.
  OMNIBUS_BASE_DIR_SUSE: /.omnibus/suse
  # Directory in which we put the artifacts after the build
  # Must be in $CI_PROJECT_DIR
  OMNIBUS_PACKAGE_DIR_SUSE: $CI_PROJECT_DIR/.omnibus/suse/pkg
  OMNIBUS_BASE_DIR_WIN: c:\omni-base\$CI_RUNNER_ID
  OMNIBUS_BASE_DIR_WIN_OMNIBUS: c:/omni-base/$CI_RUNNER_ID
  DD_AGENT_TESTING_DIR: $CI_PROJECT_DIR/test/kitchen
  STATIC_BINARIES_DIR: bin/static
  DOGSTATSD_BINARIES_DIR: bin/dogstatsd
  AGENT_BINARIES_DIR: bin/agent
  CLUSTER_AGENT_BINARIES_DIR: bin/datadog-cluster-agent
  DEB_S3_BUCKET: apt.datad0g.com
  RPM_S3_BUCKET: yum.datad0g.com
  WIN_S3_BUCKET: dd-agent-mstesting
  PROCESS_S3_BUCKET: datad0g-process-agent
  ANDROID_S3_BUCKET: dd-agent-androidtesting
  DEB_RPM_BUCKET_BRANCH: nightly # branch of the DEB_S3_BUCKET and RPM_S3_BUCKET repos to release to, 'nightly' or 'beta'
  DEB_TESTING_S3_BUCKET: apttesting.datad0g.com
  RPM_TESTING_S3_BUCKET: yumtesting.datad0g.com
  WINDOWS_TESTING_S3_BUCKET_A6: $WIN_S3_BUCKET/pipelines/A6/$CI_PIPELINE_ID
  WINDOWS_TESTING_S3_BUCKET_A7: $WIN_S3_BUCKET/pipelines/A7/$CI_PIPELINE_ID
  WINDOWS_BUILDS_S3_BUCKET: $WIN_S3_BUCKET/builds
  ANDROID_BUILDS_S3_BUCKET: $ANDROID_S3_BUCKET/builds
  DEB_RPM_TESTING_BUCKET_BRANCH: testing # branch of the DEB_TESTING_S3_BUCKET and RPM_TESTING_S3_BUCKET repos to release to, 'testing'
  DD_REPO_BRANCH_NAME: $CI_COMMIT_REF_NAME
  S3_CP_OPTIONS: --only-show-errors --region us-east-1 --sse AES256
  S3_CP_CMD: aws s3 cp $S3_CP_OPTIONS
  S3_ARTIFACTS_URI: s3://dd-ci-artefacts-build-stable/$CI_PROJECT_NAME/$CI_PIPELINE_ID
  ## comment out both lines below (S3_OMNIBUS_CACHE_BUCKET and USE_S3_CACHING) to allow
  ## build to succeed with S3 caching disabled.
  S3_OMNIBUS_CACHE_BUCKET: dd-ci-datadog-agent-omnibus-cache-build-stable
  USE_S3_CACHING: --omnibus-s3-cache
  S3_DSD6_URI: s3://dsd6-staging/linux
  RELEASE_VERSION_6: nightly
  RELEASE_VERSION_7: nightly
  DATADOG_AGENT_BUILDIMAGES: v1709713-2adac2a
  DATADOG_AGENT_BUILDERS: v1793959-4e4c346
  DATADOG_AGENT_WINBUILDIMAGES: v1876043-a759bdd
  DATADOG_AGENT_ARMBUILDIMAGES: v1897460-9b1848b
  # Multi-arch images on docker hub
  PUB_REPO: datadog/agent
  # Update this to datadog/agent when publishing the final images
  DST_REPO: datadog/agent
  # FROM https://gitlab.ddbuild.io/DataDog/datadog-agent/pipelines/1929084
  ECR_REPO: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent/agent
  INTERNAL_TAG: v1929084-ccd4eb6

.docker_tag_job_definition: &docker_tag_job_definition
  stage: image_deploy
  tags: ["runner:docker", "size:large"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker-notary:v1912023-8c8dc1c-0.6.1
  before_script:
    - export SRC_TAG=v$CI_PIPELINE_ID-${CI_COMMIT_SHA:0:7}
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.$DOCKER_REGISTRY_LOGIN_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin "$DOCKER_REGISTRY_URL"
    - pip install -r requirements.txt
    - if [[ -z "$DELEGATION_PASS_SSM_KEY" ]]; then echo "No signing key set"; exit 0; fi
    - echo "Importing delegation signing key"
    - export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.$DELEGATION_PASS_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - export NOTARY_AUTH=$(echo "$DOCKER_REGISTRY_LOGIN:$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text)" | base64)
    - export NOTARY_DELEGATION_PASSPHRASE="$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE"
    - aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.$DELEGATION_KEY_SSM_KEY --with-decryption --query "Parameter.Value" --out text > /tmp/docker.key
    - notary -d ~/.docker/trust key import /tmp/docker.key; rm /tmp/docker.key
  dependencies: [] # Don't download Gitlab artefacts

.docker_hub_variables: &docker_hub_variables
  DOCKER_REGISTRY_LOGIN_SSM_KEY: docker_hub_login
  DOCKER_REGISTRY_PWD_SSM_KEY: docker_hub_pwd
  DELEGATION_KEY_SSM_KEY: docker_hub_signing_key
  DELEGATION_PASS_SSM_KEY: docker_hub_signing_pass
  DOCKER_REGISTRY_URL: docker.io

publish_multiarch_6:
  <<: *docker_tag_job_definition
  when: manual
  variables:
    <<: *docker_hub_variables
    RELEASE_TAG: 6.15.1
  script:
    #
    # Images
    #

    # Note: we can't sign those since content trust has not been set up in -amd64 / -arm64 repositories.
    # Manifests referencing these will however be signed.

    # Images for amd64
    - inv -e docker.publish ${PUB_REPO}:${RELEASE_TAG}                   ${DST_REPO}-amd64:${RELEASE_TAG}
    - inv -e docker.publish ${PUB_REPO}:${RELEASE_TAG}-jmx               ${DST_REPO}-amd64:${RELEASE_TAG}-jmx
    - inv -e docker.publish ${PUB_REPO}:${RELEASE_TAG}-py3               ${DST_REPO}-amd64:${RELEASE_TAG}-py3
    - inv -e docker.publish ${PUB_REPO}:${RELEASE_TAG}-py3-jmx           ${DST_REPO}-amd64:${RELEASE_TAG}-py3-jmx

    # Images for arm64
    - inv -e docker.publish ${ECR_REPO}:${INTERNAL_TAG}-py2-arm64        ${DST_REPO}-arm64:${RELEASE_TAG}
    - inv -e docker.publish ${ECR_REPO}:${INTERNAL_TAG}-py2-jmx-arm64    ${DST_REPO}-arm64:${RELEASE_TAG}-jmx
    - inv -e docker.publish ${ECR_REPO}:${INTERNAL_TAG}-py3-arm64        ${DST_REPO}-arm64:${RELEASE_TAG}-py3
    - inv -e docker.publish ${ECR_REPO}:${INTERNAL_TAG}-py3-jmx-arm64    ${DST_REPO}-arm64:${RELEASE_TAG}-py3-jmx

    #
    # Manifests
    #

    # Version tags
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag ${RELEASE_TAG}            --template ${DST_REPO}-ARCH:${RELEASE_TAG}
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag ${RELEASE_TAG}-jmx        --template ${DST_REPO}-ARCH:${RELEASE_TAG}-jmx
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag ${RELEASE_TAG}-py3        --template ${DST_REPO}-ARCH:${RELEASE_TAG}-py3
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag ${RELEASE_TAG}-py3-jmx    --template ${DST_REPO}-ARCH:${RELEASE_TAG}-py3-jmx

    # Aliases
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag 6                         --template ${DST_REPO}-ARCH:${RELEASE_TAG}
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag 6-jmx                     --template ${DST_REPO}-ARCH:${RELEASE_TAG}-jmx
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag 6-py2                     --template ${DST_REPO}-ARCH:${RELEASE_TAG}
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag 6-py2-jmx                 --template ${DST_REPO}-ARCH:${RELEASE_TAG}-jmx
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag 6-py3                     --template ${DST_REPO}-ARCH:${RELEASE_TAG}-py3
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag 6-py3-jmx                 --template ${DST_REPO}-ARCH:${RELEASE_TAG}-py3-jmx
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag latest-py2                --template ${DST_REPO}-ARCH:${RELEASE_TAG}
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag latest-py2-jmx            --template ${DST_REPO}-ARCH:${RELEASE_TAG}-jmx
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag latest                    --template ${DST_REPO}-ARCH:${RELEASE_TAG}
    - inv -e docker.publish-manifest --signed-push --platform linux/amd64 --platform linux/arm64 --name ${DST_REPO} --tag latest-jmx                --template ${DST_REPO}-ARCH:${RELEASE_TAG}-jmx

revert_multiarch_6:
  <<: *docker_tag_job_definition
  when: manual
  variables:
    <<: *docker_hub_variables
    RELEASE_TAG: 6.15.1
  script:
    # Version tags
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}               ${DST_REPO}:${RELEASE_TAG}
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}-jmx           ${DST_REPO}:${RELEASE_TAG}-jmx
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}-py3           ${DST_REPO}:${RELEASE_TAG}-py3
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}-py3-jmx       ${DST_REPO}:${RELEASE_TAG}-py3-jmx

    # Aliases
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}                ${DST_REPO}:6
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}-jmx            ${DST_REPO}:6-jmx
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}                ${DST_REPO}:6-py2
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}-jmx            ${DST_REPO}:6-py2-jmx
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}-py3            ${DST_REPO}:6-py3
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}-py3-jmx        ${DST_REPO}:6-py3-jmx
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}                ${DST_REPO}:latest-py2
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}-jmx            ${DST_REPO}:latest-py2-jmx
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}                ${DST_REPO}:latest
    - inv -e docker.publish --signed-push ${DST_REPO}-amd64:${RELEASE_TAG}-jmx            ${DST_REPO}:latest-jmx
